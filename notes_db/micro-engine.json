{
  "sections": [
    {
      "title": "Main Project micro-engine",
      "chats": [
        {
          "indexTitle": "Repository",
          "question": "Repository",
          "answer": "1. Local Repository \n```bash\n    C:\\atari-monk\\code\\micro-engine)\n```\n2. [GitHub Repository](https://github.com/atari-monk/micro-engine)",
          "dateTime": "2023-11-16T14:25:21.898Z"
        },
        {
          "indexTitle": "File .gitignore",
          "question": "File .gitignore",
          "answer": "Initially, just two elements, excluded from commit, should be fine. \n\n```bash\nbuild\nnode_modules\n```",
          "dateTime": "2023-11-16T15:05:25.536Z"
        },
        {
          "indexTitle": "Formater",
          "question": "File .prettierrc",
          "answer": "Formatting is delegated to prettier with this config:\n\n```json\n{\n  \"singleQuote\": true,\n  \"indent\": 2,\n  \"semi\": false\n}\n```\n",
          "dateTime": "2023-11-16T19:02:05.477Z"
        },
        {
          "indexTitle": "Script",
          "question": "Script",
          "answer": "Folder script contains scripts shared by projects",
          "dateTime": "2023-11-16T15:19:20.594Z"
        },
        {
          "indexTitle": "Script copy-package.js",
          "question": "Script copy-package.js  \nCopy package.json to folder build in project",
          "answer": "```bash\ncopy-package.js\n```\n```javascript\nconst fs = require('fs')\nconst path = require('path')\n\nfunction getPaths(sourceFile, targetDir) {\n  const dirname = __dirname\n  const dirname_resolve = path.resolve(dirname, '.')\n\n  const sourcePath = path.join(dirname_resolve, sourceFile)\n\n  const targetPath = path.join(\n    dirname_resolve,\n    targetDir,\n    path.basename(sourceFile)\n  )\n\n  return {\n    dirname_resolve: dirname_resolve,\n    sourcePath: sourcePath,\n    targetPath: targetPath,\n  }\n}\n\nfunction printPaths(paths) {\n  console.log('dirname_resolve:', paths.dirname_resolve)\n  console.log('sourcePath:', paths.sourcePath)\n  console.log('targetPath:', paths.targetPath)\n}\n\nfunction copyFileToBuild(paths) {\n  if (!fs.existsSync(path.dirname(paths.targetPath))) {\n    fs.mkdirSync(path.dirname(paths.targetPath), { recursive: true })\n  }\n\n  fs.copyFileSync(paths.sourcePath, paths.targetPath)\n\n  console.log(`Copied ${paths.sourcePath} to ${paths.targetPath}`)\n}\n\nmodule.exports = { getPaths, printPaths, copyFileToBuild }\n```",
          "dateTime": "2023-11-16T19:04:31.976Z"
        },
        {
          "indexTitle": "Script CommonFunctions.ps1",
          "question": "Script CommonFunctions.ps1  \nThis is for installing lib to other projects using local .tgz package",
          "answer": "```bash\nCommonFunctions.ps1\n```\n```powershell\n$Global:RepoPath = \"C:\\atari-monk\\Code\\micro-engine\\\"\n\nfunction Build-Lib () {\n  npm i\n  npm run build\n  Set-Location build\n  npm pack  \n}\n\nfunction Copy-And-Install-Pack {\n  param (\n    [string]$packPath,\n    [string]$projDir,\n    [string]$packName\n  )\n  Copy-Item $packPath $projDir \n  Set-Location $projDir\n  npm i (Get-Item $packName).Name\n}\n```",
          "dateTime": "2023-11-16T19:06:17.823Z"
        }
      ]
    },
    {
      "title": "Project engine_api",
      "chats": [
        {
          "indexTitle": "Assumptions",
          "question": "Assumptions",
          "answer": "1. Typescript library\n2. API that describes my engine\n3. Each folder is name of the component with it's interfaces\n4. This will be used by client and server of game as a technology layer in form of library package, or by libs of game used by client and server\n",
          "dateTime": "2023-11-16T16:30:51.953Z"
        },
        {
          "indexTitle": "File package.json",
          "question": "File package.json",
          "answer": "```json\n{\n  \"name\": \"engine_api\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Description of my engine\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"node ./script/copy-package.js && tsc\",\n    \"i-lib\": \"powershell.exe -ExecutionPolicy Bypass -File .\\\\script\\\\i-lib.ps1\"\n  },\n  \"keywords\": [\n    \"typescript\",\n    \"library\",\n    \"engine api\"\n  ],\n  \"author\": \"atari_monk\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"typescript\": \"^5.2.2\"\n  },\n  \"dependencies\": {}\n}\n```",
          "dateTime": "2023-11-16T16:18:49.280Z"
        },
        {
          "indexTitle": "File tsconfig.json",
          "question": "File tsconfig.json",
          "answer": "```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es2016\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./build\",\n    \"declarationDir\": \"./build\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"skipLibCheck\": true,\n    \"declaration\": true\n  },\n  \"exclude\": [\"node_modules\", \"script\", \"build\"]\n}\n```",
          "dateTime": "2023-11-16T16:16:26.180Z"
        },
        {
          "indexTitle": "Script",
          "question": "script folder",
          "answer": "* Folder with scripts of the project\n* usually used in package.json \"scripts\":\n",
          "dateTime": "2023-11-16T16:23:52.096Z"
        },
        {
          "indexTitle": "Script copy-package.js",
          "question": "Script copy-package.js  \nAssuming lib and proj structure, this copies package.json to build if valid proj folder is set",
          "answer": "```bash\ncopy-package.js\n```\n```javascript\nconst lib = require('./../../script/copy-package')\n\nconst projFolder = 'engine_api'\nconst sourceFile = `../${projFolder}/package.json`\nconst targetDir = `../${projFolder}/build`\nconst debug = false\n\nconst paths = lib.getPaths(sourceFile, targetDir)\nif (debug) lib.printPaths(paths)\nlib.copyFileToBuild(paths)\n```",
          "dateTime": "2023-11-16T19:16:05.142Z"
        },
        {
          "indexTitle": "Script i-lib.ps1",
          "question": "Script i-lib.ps1  \nThis installs lib to repo projects according to list using local package",
          "answer": "```bash\ni-lib.ps1\n```\n```powershell\n. \"C:\\atari-monk\\Code\\micro-engine\\script\\CommonFunctions.ps1\"\n\n$libFolder = \"engine_api\"\n$libName = \"engine_api\"\n$build = \"$libFolder\\build\\\"\n$pack = \"$libName-1.0.0.tgz\"\n$lib = $RepoPath + $build + $pack\n\n$targetProjects = @(\n  \"$RepoPath\\engine\\\",\n  \"$RepoPath\\engine_tests\\\"\n)\n\nBuild-Lib\nforeach ($targetProj in $targetProjects) {\n  Copy-And-Install-Pack -packPath $lib -projDir $targetProj -packName $pack\n}\n```",
          "dateTime": "2023-11-16T19:16:40.273Z"
        }
      ]
    },
    {
      "title": "Project engine",
      "chats": [
        {
          "indexTitle": "Assumptions",
          "question": "Assumptions",
          "answer": "1. Same project template as engine_api\n2. Implementation of my engine\n3. Implementation of engine_api lib\n4. This will be used by client and server of a game or libs that will be used in them\n\n\n",
          "dateTime": "2023-11-16T16:40:06.479Z"
        }
      ]
    },
    {
      "title": "Project engine_tests",
      "chats": [
        {
          "indexTitle": "Assumptions",
          "question": "Assumptions",
          "answer": "1. Tests for engine_api and engine libs",
          "dateTime": "2023-11-16T16:42:09.309Z"
        },
        {
          "indexTitle": "Initial configuration",
          "question": "Initial configuration",
          "answer": "1. Project template copied from engine_api and ajusted\n2. Install  jest\n```bash\nnpm install --save-dev jest ts-jest @types/jest\n```\n3. Configure jest\n```bash\njest.config.js\n```\n```javascript\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testRegex: '(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.tsx?$',\n};\n```\n4. Add tests\n5. Run test\n```bash\nnpm test\n```",
          "dateTime": "2023-11-16T16:53:55.188Z"
        },
        {
          "indexTitle": "Debug",
          "question": "Debug",
          "answer": "```json\n\"devDependencies\": {\n    \"@types/jest\": \"^29.5.8\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^5.2.2\"\n  }\n```\n```bash\n \"debug:test\": \"node --inspect-brk -r ts-node/register ./node_modules/jest/bin/jest.js --runInBand --detectOpenHandles\"\n```\nF12 in chrome, There should be node icon for node dev tools  \nWrite beakpoint in test\n```bash\ndebbuger\n```\n```bash\nnpm run debug:test\n```\nBrakpoints were available in node dev tool",
          "dateTime": "2023-11-16T20:20:40.430Z"
        }
      ]
    },
    {
      "title": "Vector2",
      "chats": [
        {
          "indexTitle": "Assumptions",
          "question": "Assumptions",
          "answer": "1. Folder math \n2. Simple vector 2d implementation\n3. Squered length to avoid using sqrt for performance (is it still justified?)\n4. default values in ctor\n5. chainable operations\n6. this in type check\n7. static factories of special vectors\n8. immutable version",
          "dateTime": "2023-11-16T20:11:56.911Z"
        },
        {
          "indexTitle": "API",
          "question": "API",
          "answer": "```typescript\nexport interface IVector2 {\n  x: number\n  y: number\n\n  add(other: IVector2): IVector2\n  subtract(other: IVector2): IVector2\n  multiply(scalar: number): IVector2\n  dot(other: IVector2): number\n  length(): number\n  squaredLength(): number\n  normalize(): IVector2\n}\n```",
          "dateTime": "2023-11-16T17:17:34.718Z"
        },
        {
          "indexTitle": "Vector2",
          "question": "Vector2",
          "answer": "```typescript\nimport { IVector2 } from 'engine_api'\n\nexport class Vector2 implements IVector2 {\n  constructor(public x: number = 0, public y: number = 0) {}\n\n  operate(\n    { x = 0, y = 0 }: IVector2 | { x?: number; y?: number } = {},\n    operation: 'add' | 'subtract' | 'multiply' | 'divide' = 'add'\n  ): this {\n    switch (operation) {\n      case 'add':\n        this.x += x\n        this.y += y\n        break\n      case 'subtract':\n        this.x -= x\n        this.y -= y\n        break\n      case 'multiply':\n        this.x *= x\n        this.y *= y\n        break\n      case 'divide':\n        if (x !== 0) this.x /= x\n        if (y !== 0) this.y /= y\n        break\n      default:\n        throw new Error(`Unsupported operation: ${operation}`)\n    }\n\n    return this\n  }\n\n  add(other: IVector2): this {\n    return this.operate(other, 'add')\n  }\n\n  subtract(other: IVector2): this {\n    return this.operate(other, 'subtract')\n  }\n\n  multiply(scalar: number): this {\n    return this.operate({ x: scalar, y: scalar }, 'multiply')\n  }\n\n  dot(other: IVector2): number {\n    return this.x * other.x + this.y * other.y\n  }\n\n  length(): number {\n    return Math.hypot(this.x, this.y)\n  }\n\n  squaredLength(): number {\n    return this.x * this.x + this.y * this.y\n  }\n\n  normalize(): this {\n    const mag = this.length()\n    if (mag !== 0) {\n      this.operate({ x: mag, y: mag }, 'divide')\n    }\n    return this\n  }\n\n  static zero(): Vector2 {\n    return new Vector2()\n  }\n\n  static unitX(): Vector2 {\n    return new Vector2(1, 0)\n  }\n\n  static unitY(): Vector2 {\n    return new Vector2(0, 1)\n  }\n}\n```",
          "dateTime": "2023-11-16T21:58:19.327Z"
        },
        {
          "indexTitle": "ImmutableVector2",
          "question": "ImmutableVector2",
          "answer": "```typescript\nimport { IVector2 } from 'engine_api'\n\nexport class ImmutableVector2 implements IVector2 {\n  constructor(public readonly x: number = 0, public readonly y: number = 0) {}\n\n  operate(\n    { x = 0, y = 0 }: IVector2 | { x?: number; y?: number } = {},\n    operation: 'add' | 'subtract' | 'multiply' | 'divide' = 'add'\n  ): ImmutableVector2 {\n    switch (operation) {\n      case 'add':\n        return new ImmutableVector2(this.x + x, this.y + y)\n      case 'subtract':\n        return new ImmutableVector2(this.x - x, this.y - y)\n      case 'multiply':\n        return new ImmutableVector2(this.x * x, this.y * y)\n      case 'divide':\n        return new ImmutableVector2(\n          x !== 0 ? this.x / x : this.x,\n          y !== 0 ? this.y / y : this.y\n        )\n      default:\n        throw new Error(`Unsupported operation: ${operation}`)\n    }\n  }\n\n  add(other: IVector2): ImmutableVector2 {\n    return this.operate(other, 'add')\n  }\n\n  subtract(other: IVector2): ImmutableVector2 {\n    return this.operate(other, 'subtract')\n  }\n\n  multiply(scalar: number): ImmutableVector2 {\n    return this.operate({ x: scalar, y: scalar }, 'multiply')\n  }\n\n  dot(other: IVector2): number {\n    return this.x * other.x + this.y * other.y\n  }\n\n  length(): number {\n    return Math.hypot(this.x, this.y)\n  }\n\n  squaredLength(): number {\n    return this.x * this.x + this.y * this.y\n  }\n\n  normalize(): ImmutableVector2 {\n    const mag = this.length()\n    if (mag !== 0) {\n      return this.operate({ x: mag, y: mag }, 'divide')\n    } else {\n      return new ImmutableVector2()\n    }\n  }\n\n  static zero(): ImmutableVector2 {\n    return new ImmutableVector2()\n  }\n\n  static unitX(): ImmutableVector2 {\n    return new ImmutableVector2(1, 0)\n  }\n\n  static unitY(): ImmutableVector2 {\n    return new ImmutableVector2(0, 1)\n  }\n}\n```",
          "dateTime": "2023-11-16T21:58:40.517Z"
        },
        {
          "indexTitle": "Tests",
          "question": "Tests",
          "answer": "```bash\nVector2.test.ts\n```\n```typescript\nimport { Vector2, ImmutableVector2 } from 'engine'\n\nconst runVectorTests = (Vector: new (x: number, y: number) => any) => {\n  test('should add two vectors', () => {\n    const v1 = new Vector(1, 2)\n    const v2 = new Vector(3, 4)\n    const result = v1.add(v2)\n    expect(result).toEqual(new Vector(4, 6))\n  })\n\n  test('should subtract two vectors', () => {\n    const v1 = new Vector(5, 6)\n    const v2 = new Vector(2, 3)\n    const result = v1.subtract(v2)\n    expect(result).toEqual(new Vector(3, 3))\n  })\n\n  test('should multiply vector by scalar', () => {\n    const v = new Vector(2, 3)\n    const scalar = 2\n    const result = v.multiply(scalar)\n    expect(result).toEqual(new Vector(4, 6))\n  })\n\n  it('should calculate dot product of two vectors', () => {\n    const v1 = new Vector(2, 3)\n    const v2 = new Vector(4, 5)\n    const result = v1.dot(v2)\n\n    expect(result).toEqual(2 * 4 + 3 * 5)\n  })\n\n  it('should calculate the length of the vector', () => {\n    const v = new Vector(3, 4)\n    const result = v.length()\n\n    expect(result).toEqual(5)\n  })\n\n  it('should calculate the squared length of the vector', () => {\n    const v = new Vector(3, 4)\n    const result = v.squaredLength()\n\n    expect(result).toEqual(3 * 3 + 4 * 4)\n  })\n\n  it('should normalize the vector', () => {\n    const v = new Vector(3, 4)\n    const length = v.length()\n    const result = v.normalize()\n\n    const tolerance = 1e-8\n\n    const expected = length\n      ? new Vector(3 / length, 4 / length)\n      : new Vector(0, 0)\n\n    expect(result.x).toBeCloseTo(expected.x, tolerance)\n    expect(result.y).toBeCloseTo(expected.y, tolerance)\n  })\n\n  it('should handle zero vector normalization', () => {\n    const zeroVector = new Vector(0, 0)\n    const result = zeroVector.normalize()\n\n    expect(result).toEqual(new Vector(0, 0))\n  })\n\n  test('should chain multiple operations', () => {\n    const result = new Vector(1, 2)\n      .add(new Vector(3, 4))\n      .multiply(2)\n      .subtract(new Vector(1, 1))\n    expect(result).toEqual(new Vector(7, 11))\n  })\n\n  test('should destructure the result of an operation', () => {\n    const { x, y } = new Vector(2, 4).multiply(1.5)\n    expect(x).toBeCloseTo(3)\n    expect(y).toBeCloseTo(6)\n  })\n\n  test('should chain and destructure in one statement', () => {\n    const { x, y } = new Vector(1, 2)\n      .add(new Vector(3, 4))\n      .multiply(2)\n      .subtract(new Vector(1, 1))\n    expect(x).toEqual(7)\n    expect(y).toEqual(11)\n  })\n}\n\ndescribe('Vector2', () => {\n  runVectorTests(Vector2)\n})\n\ndescribe('ImmutableVector2', () => {\n  runVectorTests(ImmutableVector2)\n})\n```",
          "dateTime": "2023-11-16T21:59:07.697Z"
        }
      ]
    },
    {
      "title": "Entity-Component System",
      "chats": [
        {
          "indexTitle": "Assumptions",
          "question": "Assumptions",
          "answer": "",
          "dateTime": "2023-11-16T16:30:51.953Z"
        },
        {
          "indexTitle": "Example",
          "question": "Example",
          "answer": "```typescript\nclass Component {\n    update() {\n        // Implement component update logic\n    }\n\n    render() {\n        // Implement component render logic\n    }\n}\n\nclass Entity {\n    private components: Component[] = [];\n\n    addComponent(component: Component) {\n        this.components.push(component);\n    }\n\n    update() {\n        for (const component of this.components) {\n            component.update();\n        }\n    }\n\n    render() {\n        for (const component of this.components) {\n            component.render();\n        }\n    }\n}\n\n// Example usage:\nclass RenderComponent extends Component {\n    render() {\n        console.log(\"Rendering...\");\n    }\n}\n\nclass MovementComponent extends Component {\n    update() {\n        console.log(\"Updating position...\");\n    }\n}\n\nconst playerEntity = new Entity();\nplayerEntity.addComponent(new RenderComponent());\nplayerEntity.addComponent(new MovementComponent());\n\n// Update and render the entity\nplayerEntity.update();\nplayerEntity.render();\n```",
          "dateTime": "2023-11-16T17:15:07.916Z"
        },
        {
          "indexTitle": "API",
          "question": "API",
          "answer": "```typescript\nexport interface IComponent {\n  update(): void\n  render(): void\n}\n```\n```typescript\nimport { IComponent } from './IComponent'\n\nexport interface IEntity {\n  addComponent(component: IComponent): void\n  update(): void\n  render(): void\n}\n```",
          "dateTime": "2023-11-16T17:15:37.390Z"
        }
      ]
    },
    {
      "title": "Examples",
      "chats": [
        {
          "indexTitle": "Object.assign",
          "question": "Object.assign",
          "answer": "```typescript\nclass Point {\n  constructor(public x: number = 0, public y: number = 0) {\n    Object.assign(this, { x: this.validateX(x), y: this.validateY(y) });\n  }\n\n  private validateX(value: number): number {\n    // Some validation logic for the 'x' property\n    return Math.max(value, 0);\n  }\n\n  private validateY(value: number): number {\n    // Some validation logic for the 'y' property\n    return Math.max(value, 0);\n  }\n}\n\n// Usage\nconst point = new Point(-5, 10);\nconsole.log(point); // Output: Point { x: 0, y: 10 }\n```",
          "dateTime": "2023-11-16T20:54:48.453Z"
        }
      ]
    }
  ]
}