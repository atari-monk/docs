{
  "sections": [
    {
      "title": "Version 1",
      "chats": [
        {
          "indexTitle": "Description",
          "question": "Description",
          "answer": "* Named KeyboardMappingSystem  \n* System in ecs  \n* Mapping keyboard keys to events  ",
          "dateTime": "2024-02-03T22:28:08.265Z"
        },
        {
          "indexTitle": "File Structure",
          "question": "File Structure",
          "answer": "```plaintext\n|-- engine_api/\n|   |-- src/\n```\n```plaintext\n|-- engine/\n|   |-- src/\n|       |--ecs\n|           |--system\n|               |--keyboard\n|                   |--KeyboardMappingSubSystem.ts\n|                   |--KeyboardMappingSystem.ts\n|                   |--keyboardTypes.ts\n```",
          "dateTime": "2024-02-03T22:26:06.639Z"
        },
        {
          "indexTitle": "KeyboardTypes",
          "question": "KeyboardTypes",
          "answer": "```typescript\nexport type KeyAction = () => void\n\nexport type KeyActionMap = { [key: string]: KeyAction }\n\nexport type KeyEvent = 'KeyDown' | 'KeyUp'\n\nexport const KeyEvents: { [key in KeyEvent]: key } = {\n  KeyDown: 'KeyDown',\n  KeyUp: 'KeyUp',\n}\n\nexport type KeyActionWithParam<T> = (data: T) => void\n\nexport type KeyActionWithParamMap<T> = { [key: string]: KeyActionWithParam<T> }\n\nexport const KeyboardEvent = 'KeyboardEvent'\n\nexport type KeyboardKey = 'q' | 'e' | 'z' | 'x'\n\nexport const KeyboardKeys: { [key in KeyboardKey]: key } = {\n  q: 'q',\n  e: 'e',\n  z: 'z',\n  x: 'x',\n}\n```",
          "dateTime": "2024-02-03T23:34:12.376Z"
        },
        {
          "indexTitle": "KeyboardMappingSubSystem",
          "question": "KeyboardMappingSubSystem",
          "answer": "```typescript\nimport { KeyboardKey } from './keyboardTypes'\n\nexport default interface IKeyboardEventData {\n  entityId: string\n  key: KeyboardKey\n}\n```\n```typescript\nimport { IEntity } from 'engine_api'\n\nexport default interface IKeyboardMappingSubSystem {\n  subscribeInput(entity: IEntity): void\n  unsubscribeInput(): void\n}\n```\n```typescript\nimport { IInputManager, IEventSystem, IEntity } from 'engine_api'\nimport {\n  KeyActionWithParamMap,\n  KeyEvents,\n  KeyboardEvent,\n  KeyboardKeys,\n} from './keyboardTypes'\nimport IKeyboardMappingSubSystem from './IKeyboardMappingSubSystem'\nimport IKeyboardEventData from './IKeyboardEventData'\n\nexport default class KeyboardMappingSubSystem\n  implements IKeyboardMappingSubSystem\n{\n  private _keyActions: KeyActionWithParamMap<string>\n  private _keyDownCallback!: (key: string) => void\n\n  constructor(\n    private readonly _inputManager: IInputManager,\n    private readonly _eventSystem: IEventSystem\n  ) {\n    this._keyActions = this.initKeyAction()\n  }\n\n  private initKeyAction() {\n    return {\n      q: (id) =>\n        this._eventSystem.publish(KeyboardEvent, {\n          entityId: id,\n          key: KeyboardKeys.q,\n        } as IKeyboardEventData),\n      e: (id) =>\n        this._eventSystem.publish(KeyboardEvent, {\n          entityId: id,\n          key: KeyboardKeys.e,\n        } as IKeyboardEventData),\n      z: (id) =>\n        this._eventSystem.publish(KeyboardEvent, {\n          entityId: id,\n          key: KeyboardKeys.z,\n        } as IKeyboardEventData),\n      x: (id) =>\n        this._eventSystem.publish(KeyboardEvent, {\n          entityId: id,\n          key: KeyboardKeys.x,\n        } as IKeyboardEventData),\n    } as KeyActionWithParamMap<string>\n  }\n\n  subscribeInput(entity: IEntity): void {\n    this._keyDownCallback = (inputKey: string) => {\n      const key = inputKey.toLowerCase()\n      if (this.isKeyMapped(key)) return\n      this._keyActions[key](entity.id)\n    }\n\n    this._inputManager.subscribeInputEvent(\n      KeyEvents.KeyDown,\n      this._keyDownCallback\n    )\n  }\n\n  unsubscribeInput() {\n    this._inputManager.unsubscribeInputEvent(\n      KeyEvents.KeyDown,\n      this._keyDownCallback\n    )\n  }\n\n  private isKeyMapped(key: string) {\n    return !this._keyActions.hasOwnProperty(key)\n  }\n}\n```",
          "dateTime": "2024-02-03T23:37:00.871Z"
        },
        {
          "indexTitle": "KeyboardMappingSystem",
          "question": "KeyboardMappingSystem",
          "answer": "```typescript\nimport { IEntityManager, IEntity, IManager, IFactory } from 'engine_api'\nimport InitLogicSystemBase from '../base/init_logic/InitLogicSystemBase'\nimport IKeyboardMappingSubSystem from './IKeyboardMappingSubSystem'\nimport MapManager from '../../entity/manager/MapManager'\n\nexport default class KeyboardMappingSystem extends InitLogicSystemBase {\n  private _subSystemManager: IManager<IKeyboardMappingSubSystem> =\n    new MapManager<IKeyboardMappingSubSystem>()\n\n  constructor(\n    entityManager: IEntityManager,\n    private readonly _subSystemFactory: IFactory<IKeyboardMappingSubSystem>\n  ) {\n    super(entityManager)\n  }\n\n  initLogic(entity: IEntity): void {\n    const subSystem = this._subSystemFactory.create()\n    subSystem.subscribeInput(entity)\n    this._subSystemManager.add(entity.id, subSystem)\n  }\n\n  unsubscribe(entity: IEntity) {\n    const subSystem = this._subSystemManager.getStrict(entity.id)\n    subSystem.unsubscribeInput()\n  }\n}\n```",
          "dateTime": "2024-02-03T23:35:26.892Z"
        }
      ]
    }
  ]
}