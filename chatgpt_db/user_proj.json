{
  "sections": [
    {
      "title": "coding notes",
      "chats": [
        {
          "question": "**11.11.2023**\n\n```typescript\nexport interface IApp {\n  _id: string\n  name: string\n  desc: string\n}\n```\n\n```typescript\nexport interface IUser {\n  _id: string\n  email: string\n  displayName: string\n}\n```\n\n```typescript\nexport interface IUserApps {\n  _id: string\n  userId: string\n  appId: string\n}\n```\nI need tsx react component that will display list of users and for each user it will display his apps list",
          "answer": "* This worked\n```typescript\nimport { FC, useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { IUser } from '../api/IUser'\nimport { IApp } from '../api/IApp'\nimport { appConfig } from 'auth-lib'\n\nconst UsersAppsList: FC = () => {\n  const [users, setUsers] = useState<IUser[]>([])\n  const [userApps, setUserApps] = useState<{ [userId: string]: string[] }>({})\n  const [apps, setApps] = useState<IApp[]>([])\n\n  const fetchUsers = async () => {\n    try {\n      const usersResponse = await axios.get<IUser[]>(\n        `${appConfig.apiUrl}/users`\n      )\n      setUsers(usersResponse.data)\n    } catch (error) {\n      console.error('Error fetching users:', error)\n    }\n  }\n\n  const fetchUserApps = async (userId: string) => {\n    try {\n      const userAppsResponse = await axios.get<string[]>(\n        `${appConfig.apiUrl}/user-apps/getUserApps/${userId}`\n      )\n      setUserApps((prevUserApps) => ({\n        ...prevUserApps,\n        [userId]: userAppsResponse.data,\n      }))\n    } catch (error) {\n      console.error(`Error fetching user apps for user ${userId}:`, error)\n    }\n  }\n\n  const fetchApps = async () => {\n    try {\n      const appsResponse = await axios.get<IApp[]>(`${appConfig.apiUrl}/apps`)\n      setApps(appsResponse.data)\n    } catch (error) {\n      console.error('Error fetching apps:', error)\n    }\n  }\n\n  useEffect(() => {\n    fetchUsers()\n    fetchApps()\n  }, [])\n\n  useEffect(() => {\n    // Log userApps and apps for debugging\n    console.log('userApps:', userApps)\n    console.log('apps:', apps)\n  }, [userApps, apps])\n\n  useEffect(() => {\n    // Fetch user apps for each user\n    users.forEach((user) => {\n      fetchUserApps(user._id)\n    })\n  }, [users])\n\n  return (\n    <div>\n      <h2>User List</h2>\n      <ul>\n        {users.map((user) => (\n          <li key={user._id}>\n            <p>{user.displayName} :</p>\n            <ul>\n              {userApps[user._id]?.map((appId) => {\n                const app = apps.find((a) => a._id === appId)\n                return app ? (\n                  <li key={app._id}>\n                    <p>{app.name}</p>\n                    {/* <p>Description: {app.desc}</p> */}\n                  </li>\n                ) : null\n              })}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default UsersAppsList\n```\n\n* Had problem with endpoint to hit\nRouter below worked\nIt is important to state more specific routes first, that way generic will be matched last\n\n```typescript\nimport express from 'express'\nimport * as userAppsController from '../controllers/user-apps-controller'\n\nconst router = express.Router()\n\nrouter.route('/getUserApps/:userId').get(userAppsController.getUserApps)\n\nrouter\n  .route('/:userId/:appId')\n  .get(userAppsController.getUserAppId)\n  .delete(userAppsController.deleteUserApp)\n\nrouter\n  .route('/')\n  .post(userAppsController.createUserApp)\n  .get(userAppsController.getAllUserApps)\n\nexport default router\n```\n* Also it is nice and fast to just test web api, if endpoints hit, with urls in browser and ndb debuger",
          "dateTime": "2023-11-11T23:54:54.593Z"
        }
      ]
    }
  ]
}